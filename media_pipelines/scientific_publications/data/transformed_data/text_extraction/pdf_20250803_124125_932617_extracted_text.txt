arXiv:1905.09264v1 [cs.RO] 22 May 2019
Automated shapeshifting for function recovery in
damaged robots
Sam Kriegman¹, Stephanie Walker², Dylan Shah², Michael Levin³, Rebecca Kramer-Bottiglio², Josh Bongard¹
¹University of Vermont, ²Yale University, ³Tufts University

Abstract—A robot's mechanical parts routinely wear out from normal functioning and can be lost to injury. For autonomous robots operating in isolated or hostile environments, repair from a human operator is often not possible. Thus, much work has sought to automate damage recovery in robots. However, every case reported in the literature to date has accepted the damaged mechanical structure as fixed, and focused on learning new ways to control it. Here we show for the first time a robot that automatically recovers from unexpected damage by deforming its resting mechanical structure without changing its control policy. We found that, especially in the case of "deep insult", such as removal of all four of the robot's legs, the damaged machine evolves shape changes that not only recover the original level of function (locomotion) as before, but can in fact surpass the original level of performance (speed). This suggests that shape change, instead of control readaptation, may be a better method to recover function after damage in some cases.

[PAGE 1] I. INTRODUCTION
Certain remote, hazardous or otherwise inaccessible environments preclude human intervention when a robot fails or is damaged. It would thus be advantageous for systems operating in such environments to have some capacity for self-maintenance and -repair.

Indeed, much work has investigated how, in the absence of external supervision, a robot can automatically learn new ways to control its body when damaged [6, 10, 13, 20, 24, 26, 34]. While a diverse set of recovery mechanisms have been proposed, they all shared a common assumption: The damaged mechanical structure could be reconfigured, but not fundamentally deformed.

This assumption is reasonable in classical robots, which are, generally, jointed collections of rigid links. But recent advances in materials science and 3D printing are enabling the construction of soft machines with theoretically infinite degrees of freedom and thus capable of deforming their structures so as to regenerate a lost part or embrace an entirely new geometry in the face of unanticipated insult. The possibility of such change affords a completely novel mode of damage recovery: No robot built to date has altered its resting structure in order to recover function lost due to damage.

Previous computational studies have demonstrated structural but non-functional change in discrete models. For example, cellular automata have been trained to grow a target structure from a single cell [14, 29]. Similar growth rules could in principle be instantiated in self-assembling modular robots [44, 46]. However, structural change would require access to additional modules in the environment, redundant modules on the body, or the ability to internally generate them. Moreover, it is unclear how or if such rules could dictate continuous geometric deformation in soft robots.

The present work builds on two closely-related research projects in which injured robots automatically generate and test candidate control policies in order to find compensatory behaviors that work in spite of damage [6, 13].

In the first, Bongard et al. [6] demonstrated how, under the right conditions, an autonomous robot could internally model its own geometry with minimal sensorimotor experiment. The benefit of this approach is that, once a sufficiently accurate self-model has been established, actions can be internally rehearsed, discarding those which are unsuccessful or dangerous, before attempting them in reality. If model accuracy drops, as from structural changes due to damage, modeling resumes and continues until the robot's current morphology is adequately reflected in the robot's model of self.

The main drawback of this approach is that internal modeling requires additional computation, and there are circumstances in which the robot cannot afford—in terms of time, money, energy, stability, and the overall well-being of itself and others—to remain stationary for extended periods of time.

To speed recovery, Cully et al. [13] proposed that robots should instead exploit the fact that resources prior to deployment are relatively cheap in terms of the factors listed above. A large, behavioral repertoire composed of mappings from behaviors (for the undamaged robot) to their predicted performances can therefore be modeled in simulation beforehand, and come preinstalled on the robot. Assuming damage is detected by an external mechanism, the authors showed how, under certain conditions, such a map can be rapidly updated and traversed to find successful behavior, which is implicitly robust to differences between the current and pre-deployment morphologies.

The robots used in this past work consisted of rigid components attached together with a handful of mechanical degrees of freedom: The quadruped in [6] had 8 motors and 4 DOF; the hexapod in [13] had 18 motors and 12 DOF. The control problem was greatly impacted by these mechanical details and their intrinsic dynamics, but they were taken as given, even when damaged, because these robots simply could not deform their resting structure.

Instead of treating the body as just the problem domain, we here modify it as part of the computational loop. This is possible because our robot has many more (140) mechanical degrees of freedom, and the ability to change the volume, rather than just the relative displacement, of each component. This flexibility enables a heretofore unexplored mode of damage recovery: keep the existing controller but deform the resting structure. Existing approaches to controller adaptation could in principle (although this is not investigated here) be paired with such changes to morphology. However, in many cases, it would be desirable to retain a previously optimized and fine-tuned controller, especially if missing structure can simply be regenerated.

We here show that, under a wide range of damage scenarios, automated shapeshifting can be advantageous, and that, in most of the cases tested, shapeshifting alone (holding the existing controller fixed) outperforms controller adaptation alone (holding the damaged shape fixed), in terms of recovered mobility.

[PAGE 2] II. METHODS
This section describes the hardware, simulation and control of our robot, the damage scenarios it faces and its options for recovery: shapeshifting and controller adaptation. We also define a tripartite classification of 'structure', 'shape' and 'configuration' that forms the basis of our argument, which is, briefly, that the way in which our robot recovers from damage—shape change—was outside the scope of any robot previously reported in the literature.

A. The source code.
github.com/skriegman/2019-RSS

B. The robot.
The robot is an isobilaterally symmetrical quadruped constructed from 140 inflatable silicone "voxels" (Figs. 1f and 2). We here present a method for creating air-filled voxel membranes with relatively uniform thickness. Creating thin, hollow 3D silicone structures is challenging due to several factors, including mold precision and potential for damage during release from molds. One effective but labor-intensive method is to make the 3D shapes by adhering 2D films at their joints [31]. Here, inspired by a scalable 2-axis rotational molding technique [45], we employ a 1-axis rotational drip-molding machine.

First, silicone (Dragon Skin 10 Fast; Smooth-On, Inc.) was poured into an open-face acrylic mold and a tongue depressor was used to roughly spread the silicone along the walls. The mold was then attached to the rotational molding machine with the rotation axis oriented downward at 45 degrees relative to horizontal, and run through cycles comprising a 90° turn, stopping for 45 seconds after each turn to allow the silicone to flow and evenly coat each side. Excess silicone dripped out of the mold, leaving a thickness which was dependent on several interrelated factors including the cure time, viscosity, and the interaction between the silicone and acrylic.

After the silicone cured, excess material was cut away. A silicone base-layer was then rod-coated onto a flat acrylic sheet. Next, the bottomless cubes were placed on the base-layer and allowed to cure, sealing air inside each voxel. The voxels were then cut from the sheet and a small hole was punched in each voxel for tubing. Finally, silicone tubes were inserted and bonded with Sil-Poxy (Smooth-On, Inc.).

The overall robot consists of a 6×6×3 voxel torso and four removable 2×2×2 voxel legs (Figs. 1f-j and 2). Sil-Poxy and Ecoflex 00-50 were used to improve adhesion between voxels. To explore the effect of layer thickness on the range of attainable morphologies, two versions of the robot were fabricated: The blue robot (Fig. 2) consists of voxels made with one layer of silicone, while the purple robot (Fig. 1f-j) consists of thicker-walled voxels made with two layers of silicone.

Individual cubic voxels were manually inflated at pressures less than 20 kPa, and approached a spherical shape as pressure increased. When patterned together into a robot, selective inflation of a subset of voxels induces overall robot shape change. To reduce friction and weight effects in the robots, they were placed on top of a glass crystallizing dish, which lifted their legs off the table surface. While this arrangement made motion difficult, it allowed us to conduct a preliminary investigation of the feasibility of transferring simulated shape change to a physical system. In future implementations, the manual inflation could be replaced by pressure regulators [7], allowing the robot to approach the continuous control achievable in simulation.

To understand some of the trade-offs between design parameters, consider a spherical pressure vessel in uniform free expansion:

$p = (2Eet)/(r) = (2Eεto (1 – δ))/(ro - ε)$ (1)

where $t_o$ [m] is the thickness of the pressure vessel, $r_o$ [m] is the radius, $e$ is the linear strain due to expansion, $E$ [MPa] is Young's modulus, and $δ$ is the radial strain (which is determined from $e$ and the material's Poisson's ratio). Note that each voxel can push outward with a force proportional to the pressure. Examining Eq. 1, we see that at a given strain rate and initial dimensions, the internal pressure scales linearly with both thickness and modulus. Thus, when choosing thickness of voxels, there was a tradeoff between weight and internal pressure: doubling the wall thickness doubled weight, in exchange for doubled operational pressure.

[PAGE 3] C. The simulation.
To simulate the robot, we use the voxel-based physics engine Voxelyze [16], which simulates elastic voxels using two elements: particles and beams. Particles have mass and rotational inertia, and are connected on a cartesian grid by spring-like beams (with translational and rotational stiffness). For visualization and reference, part of a voxel mesh is drawn around this structure such that each voxel has a single particle at its center (Fig. 3).

Two adjacent voxels are connected, centerpoint to centerpoint (i.e., particle to particle), by a single, shared beam. Material properties (e.g., volume and elasticity) are specified at the particles but implemented as attributes of beams (e.g., their rest length, and how easily they twist and stretch). Where two adjacent particles disagree in their "desired" attributes of a shared beam, an average is taken.

A beam exits a voxel normal to, and in the center of, one of the voxel's faces. Although the mesh is drawn such that voxel edges bend around the underlying beam-mass network (see, e.g., Fig. 1), a spherical envelope is used for collision detection, thus approximating the spherical expansion of the physical voxels (with maximal expansion occurring at the center of each face). For more details see [16].

D. The structure and shape of a robot.
The structure, $S$, of a robot is determined by the number and placement of voxels, and simulated by the presence and absence of particles on a regular grid in the workspace. Let the bit value $v_i$ denote the presence ($v_i = 1$) or absence ($v_i = 0$) of a voxel at index $i$. The structure,

$S = \{i : v_i = 1\}$, (2)

is thus a set of voxel coordinates.

The shape, $\mathcal{S}$, of a robot is determined by the resting volume of each voxel, which is expressed in simulation as the resting (or, equilibrium) lengths of the beams connecting adjacent particles, and in reality as a resting pressure within each voxel (though the exact pressure, $p_i$, is not measured here). Let the floating point value $b_i$ denote the beam rest length stored at the $i$-th simulated voxel. The shape,

$\mathcal{S}_{sim} = \{b_i : i ∈ S\} \sim \mathcal{S}_{real} = \{p_i : i ∈ S\}$, (3)

is thus a set of voxel resting volumes.

The robot has a quadrupedal predamage structure (Figs. 1a,f and 2) with atmospheric voxel resting pressure, which is approximated by nominal beam rest lengths of 1 cm. Damage removes structure (voxels) (Fig. 1b). Postdamage structural deformation—shape change—is executed by pressure changes in the remnant structure (i.e., mutations in $\mathcal{S}_{real}$) (Fig. 1h-j) and approximated by local adjustments in the remaining beam-mass network (i.e., mutations in $\mathcal{S}_{sim}$) (Fig. 1c-e). The mechanical structure and its resting shape are fixed prior to behavior during the evaluation period (20 actuation cycles).


[PAGE 3] E. The controller and configuration of a robot.
The controllers continuously reconfigure the volume of a given mechanical structure during the evaluation period. We here consider open loop control of ±0.5 cm³ volumetric change (±50% from nominal), at each voxel, with a phase offset relative to a central pattern generator, for 4 sec. Controllers are here encoded as neural networks that map the indices of voxels in 3D space (Eq. 2) to a phase offset value, $\phi_i$, between $-2\pi$ and $2\pi$. We chose this particular encoding, which is commonly referred to as a Compositional Pattern-Producing Network, or CPPN [38], because spatial regularities (in structure and actuation) are known to facilitate locomotion. (For more details about this encoding, see [11].)

The instantaneous configuration, $C$, of a robot is determined by an oscillating adjustment to the volume (and thus pressure) of each voxel, centered around its shape $\mathcal{S}$. In simulation, rest lengths are periodically varying ($f = 5$ Hz) around their baseline, $b_i$, with constant amplitude ($A \approx 0.145$ cm), but damped by $ξ$. Damping prevents contracting voxels from overlapping by decreasing their oscillation amplitude as their rest length approaches a lower bound of $b_i = 0.25$ cm.

The instantaneous adjustment to the rest length of the $i$-th simulated voxel, at time $t$, is thus:

$\psi_i(t) = A \cdot sin(2\pi ft + \phi_i) \cdot ξ(b_i)$, (4)

where:

$ξ(b) = min(1, (4b-1)/3)$ (5)

The configuration,

$C_{sim}(t) = \{b_i + \psi_i(t) : i ∈ S\}$, (6)

is thus a cyclical adjustment in the rest length between adjacent simulated voxels (implemented when computing the elastic force between them) throughout a structure $S$ with shape $\mathcal{S}_{sim}$. Although simple, open loop control has the ability to produce complex behaviors, such as symmetrical and asymmetrical gaits (from patches of voxels that oscillate in counter-phase), or propagating waves of excitation (from a sequence of voxels with increasing or decreasing phase offsets). Indeed, it is well known that central pattern generators in the mammalian spinal cord (and elsewhere in invertebrate systems) produce the basic, rhythmic motor patterns of locomotion, such as stepping, independently of sensory input [15].

[PAGE 4] F. The damage scenarios.
We here consider nine damage scenarios—we amputate: (i) half of a leg; (ii) one entire leg; (iii) two adjacent legs; (iv) two diagonal legs; (v) three legs; (vi) all four legs; (vii) one quarter of the robot's body; (viii) one half of the body; and (ix) three quarters of the body.

G. The recovery options.
Each damage scenario removes structure and breaks the robot's functionality: the robot loses voxels and its ability to walk. We here consider two options for function recovery:

1) Controller readaptation. A new controller is optimized for locomotion with the damaged structure, as in [6, 13]. The only parameter subject to (re)optimization is the phase offset, $\phi_i$, of each voxel.
2) Shapeshifting. The shape of the damaged structure is optimized for locomotion with the existing controller. The only parameter subject to optimization is the baseline rest length, $b_i$, of each voxel.

H. The shape change.
The body is reshaped prior to behavior (i.e., before the controller is turned on), analogous to a prenatal developmental stage. This is done by adjusting the robot's shape, $\mathcal{S}$, as defined in Eq. 3. Then, behavior results from oscillations that are symmetrically distributed about this shape (Eq. 6).

The same kind of neural network that encodes controllers (i.e., a CPPN) was also used to encode the robot's shape. However, the shape-encoding networks output a rest beam length, $b_i$, between 0.25 and 2 cm (instead of a phase offset, $\phi_i$, between $-2\pi$ and $2\pi$). Subject to the constraints outlined above, optimization searches for shape-encoding networks that result in resting shapes that, when coupled with the original open-loop controller (previously optimized for the undamaged robot), synergize to recover forward movement.

[PAGE 4] I. The optimization algorithm.
Shapes and control policies are here optimized to displace the (simulated) robot in any direction using Age-Fitness-Pareto Optimization [35], an evolutionary algorithm that uses the concept of Pareto dominance and an objective of 'age' (in addition to displacement) intended to promote diversity among candidate designs and prevent premature convergence.

A trial is initialized with a population of 50 randomly-generated designs with age zero. Every generation, the population is first doubled by creating modified copies of each individual in the population (i.e., offspring, in which 'age' is set equal to that of the parent), where modification occurs only to the encoding-network that is currently being optimized (either that of $\mathcal{S}$ or $b$). The age of each individual is then incremented by one. Next, an additional random individual (with age zero) is injected into the population (which now consists of 101 designs). Finally, selection reduces the population to its original size (50 designs) according to the two objectives of net displacement (maximized) and age (minimized): Starting with nondominated designs ($N = 0$), successive Pareto fronts (containing designs dominated by exactly $N$ alternatives, for $N = 1, 2,...$) are kept in their entirety until doing so would overfill the population past its original size; then, designs are selected one-by-one with probability proportional to their net displacement. (The 51 unselected designs are deleted.)

This process of random variation and directed selection is repeated for $G$ generations, in which both the architectures and weights of the encoding networks are optimized: Mutations add, modify or remove a particular vertex or edge. Where modification of an edge reweights it (within -1 to 1 bounds) by adding a value randomly drawn from a normal distribution with mean zero and standard deviation 0.5. Vertex modification swaps the node's activation function with a randomly chosen function in the set (adopted from [23]): $sin()$, $abs()$, $square()$, $sqrt(abs())$; and the negations of those four.

[PAGE 4] III. RESULTS
Prior to damage, twenty controllers were optimized (for $G = 1500$ generations) to generate forward movement in the simulated quadruped during an evaluation period of 4 sec (with numerical integration time steps of 0.000151 sec). Predamage displacement ranged from 37 to 46 cm (6.2 - 7.7 body lengths).

In order to isolate the effect of shape change relative to that of controller adaptation, across a diversity of insult, the simulated robot is copied 9 * 2 * 20 = 360 times; once for each unique damage scenario (9 total), recovery option (2 total) and controller (20 total) triplet. Each copy is thus given an optimized controller and recovery option, cut according to its particular damage case, and then reoptimized for displacement (for $G = 500$ postdamage generations).

[PAGE 5] A. The performance recovered after damage.
Figure 5 plots mean relative performance (i.e., postdamage displacement as a fraction of predamage displacement), with 99% bootstrapped confidence intervals, for the two recovery options in each damage scenario.

There are two, independent recovery options: controller readaptation (control) and shapeshifting (treatment). For each damage scenario, the data consist of two random samples, a sample from the control population (20 independent trials, holding the shape of the damaged structure fixed) and an independent sample from the treatment population (20 independent shape optimization trials, holding the controller fixed). On the basis of these samples we wish to investigate the presence of a treatment effect that results in a shift of location (median). The null hypothesis is that of no treatment effect; the samples can be thought of as a single sample from one population.

We used a distribution-free rank sum test (Wilcoxon, Mann and Whitney) for the hypothesis of no treatment effect, with Bonferroni correction for nine comparisons. The corrected rank sum test and the 99% bootstrapped CIs (of the mean) are in agreement. That is, statistical significance between shapeshifting and controller adaptation, at the 0.01 level, can be correctly inferred, for each damage scenario, by visual inspection of Fig. 5 (i.e., no overlap in the shaded confidence intervals here implies rejection of the null hypothesis).

Overall, shape change was more successful (often better and never worse) than controller adaptation. Interestingly, the proportion of fitness recovered was in some cases higher than one. This could be due to a lack of volume conservation and the possibility that larger robots simply run faster than small ones. However, many robots recovered by reducing their overall volume (e.g., Figs. 7 and 8). Moreover, controller adaptation also achieved higher-than-predamage performance in one case (amp. = 2 adj. legs), and this phenomenon was also documented in [13] but not via shape change.

To explicitly control for the effect of body size, we optimized the controller of an otherwise identical quadruped that is twice the size of the original (Fig. 6). Isometrically increasing volume did not affect speed: There was no significant difference in speed (at the 0.01 level) between the enlarged and original quadruped. This is because the controller oscillations are added on top of (not relative to) the root shape (Eq. 6). The enlarged robot has eight times the volume of the original, beam length oscillations still have the same amplitude.

Despite the fact that control was optimized for the original quadruped, and that amputation of all four legs removes 23% of the original volume and actuation (Fig. 4), robots that recovered from this particular insult through shape change (Fig. 1) move significantly faster than both the original and isometrically enlarged quadrupeds (Fig. 6). It follows that the efficacy of shapeshifting is not due simply to increased volume; rather, it is due to where and how the remnant structure's shape is deformed, which affects (e.g.) the robot's posture and mass distribution, its points of contact with the ground, and the storage and release of elastic strain energy, during locomotion.


[PAGE 6] B. The found techniques of recovery.
We found that the optimizer discovered diverse recovery strategies through shape change (Figs. 7-9), whereas controller readaptation often converged on the same strategy. For example, with all four legs removed due to damage, the robot is reduced to a cuboid, and the only viable locomotion technique found by controller readaptation was crawling. During post-damage optimization, many of these robots evolved crawling by peristalsis or in a manner that resembles the serpentine crawling of snakes [1].  Deforming the structure, even in a random manner, tends to produce greater frictional anisotropy which enhances peristalsis and serpentine crawling, and enables yet simpler forms of movement such as two-anchor crawling [1].

Nevertheless, crawling is inefficient because of drag. Here, in many damage cases, behavioral competence was recovered through shape changes that partially or completely (but, due to material constraints, never perfectly) regenerated missing legs. Notably, when all four legs were amputated, recovery strongly converged on the solution of regeneration, and the resulting designs were some of the fastest overall (Fig. 1). Note that the objective function does not assume or directly select for legged locomotion.

Other amputations, however, can be beneficial, if they result in a shape that is easier to efficiently control than the original: Prior to damage, the robot's sagittal silhouette resembles a II. When two adjacent legs are amputated, the resulting Γ shape, which initially falls forward like this due to gravity, tends to rapidly surpass predamage performance through controller readaptation alone, despite its diminished size.

When only half of a leg was lost to injury, some robots contracted all of the undamaged legs to recover a stable but shorter quadrupedal form. Others seemed to simply regenerate the missing part through local volumetric expansion at the site of damage: The stump was isometrically expanded into a leg that was the same length as the original but much wider.  On closer inspection, however, many of those who regenerated a limb also made various other compensatory shape changes away from the site of damage, such as expanding and curving their spine. Thus even when damage is isolated to a small part of the robot's structure, global changes, in addition to local repairs, can sometimes streamline recovery.

When damage was distributed across a wider portion of the body, a diversity of solutions were discovered. For example, after the amputation of a quarter of the robot's body, the robot occasionally splayed out its pelvis to form a straighter and faster shape (Fig. 7). And, after the amputation of three legs, some robots once again grew replacements, but, because of other changes (e.g., a greatly expanded back), the remaining "genuine" leg needed to be partially contracted and tucked inward for balance (Fig. 10).

In the case where half of the robot's body is removed, the undeformed structure falls under gravity onto its side; one local optima was thus to crawl "facedown". A better strategy was found in which the robot could remain upright by using the two remaining limbs as forelegs and expanding the stump to form a wide hind leg. An equally proficient strategy was observed in which the robot diminished one or both of its legs, expanded its spine, and moved longitudinally (Fig. 8).  There were many successful variations on this theme, but one of the best designs in this case did the exact opposite: The robot expanded its remaining limbs to their maximum volume, contracted its spine, and flipped over (once) to walk longitudinally with the added momentum generated from large, swaying front and back limbs (Fig. 9).

However, after the most extreme insult, when all but a quarter of the robot is lost, there is insufficient material to regenerate legs or execute other more extreme shape changes. Neither recovery option cultivated (visually) appreciable gains in fitness. Yet, while this case removes 71% of the original volume it is significantly less deleterious to controller optimization than amputating the four legs, which removes just 23% of the original volume. Insult is thus a matter of kind, not degree.

[PAGE 6] C. The transferal of recovery strategies to reality.
To investigate the potential for directly transferring recovery strategies from simulation to reality, we aimed to transfer the overall shapes that are pictured in Figs. 1 and 10. In these particular cases, the optimizer found shapes with contiguous sections of voxels actuated to similar levels. Thus, we here examine the one-actuator case, in which the voxels with the largest rest volumes—the top layer of (6 × 6 = 36) voxels and the two corner voxels just below the top layer, on each corner of the torso (8 in total)—were connected to the same air inlet. Voxels not hooked into the air line were punctured to allow for passive deflation and contraction of the robot, mimicking the simulated robot's ability to contract voxels by decreasing the rest lengths $b_i$.

The purple robot adequately expands the top layer of voxels in both cases (Figs. 1j and 10j), but fails to reach the overall target shapes drawn in Figs. 1e and 10e. Although further increasing pressure did indeed lead to larger deformations, the outer voxels inflate farther than interior ones, limiting the maximum viable actuation pressure. The thinner voxel walls of the blue robot exacerbated this issue (Fig. 10k-o), but


[PAGE 7] their increased flexibility enabled a more faithful transferal of overall surface curvature. Another limitation we discovered was friction. Fully realizing the target shape in Fig. 10e requires the robot to drag its leg inward across the floor, tucking it under its body; but the silicone leg often stuck to the surface, preventing the prescribed maneuver in reality.  The silicone design and 1-axis rotational molding technique are still quite promising. Even when inflated at high enough pressures to make the outer voxels approximately spherical (Fig. 10o), the voxels did not rupture. To achieve more consistent expansion of interior and exterior voxels, the latter should be inflated at a lower pressure than the former. By incorporating strain sensors [43] and closed-loop control in future, the robot could correct for this variation on the fly. By actuating different voxels at different pressures, and enabling active contraction in addition to expansion, a much wider range of simulated shapes could be attained in reality.

[PAGE 7] IV. DISCUSSION
In this paper, a new approach to robot damage recovery has been proposed. Instead of presenting the remnant shape of the damaged robot to optimization as fixed, we enable optimization to change this shape as the essential part of the recovery process. In doing so we realized a machine that recovered more function than an otherwise equivalent system that could adapt its controller but not deform its shape.

In future work we will improve the transferal of simulated morphing machines to physical ones using existing sim2real methods [2, 6, 13, 17, 24, 40] adapted appropriately to meet the additional transferal demands dictated by soft materials [27]. We will also generalize our optimization method such that control and shape readaptation can be combined as dictated by the form of damage, predamage structure of the robot, and its task environment.

[PAGE 7] A. Biological regeneration.
In past work, rigid-bodied robots have been venerated for their ability to "adapt like animals" [6, 13]. These machines, which were constructed from undeformable metals and hard plastics, automatically learned to control their bodies in spite of missing or broken legs. But when an animal loses one or more of its legs to injury, it does not adapt by merely searching for a new mental representation of behavior that successfully maps onto the damaged body. Rather, they often fundamentally deform their damaged "hardware" into something more controllable.

Evidence for this abounds. A famous example is the congenitally two-legged goat described by Slijper [37]: an otherwise normal goat which was born without forelegs adopted an upright posture and learned to walk on its hind legs alone. In addition to enlarged hind legs, striking changes in morphology were documented, including a greatly elongated gluteal tongue and an innovative arrangement of small tendons, a narrowed pelvis, an oval (rather than V-shaped) thoracic cross-sectional shape, a curved spine, and an unusually large neck [42]. The animal's body resembled that of a kangaroo more closely than that of a normal goat.

Other animals can regenerate. The planarian flatworm can be cut into many pieces (the record is 279) all of which grow back to a full organism, regenerating not just tail and head, but eyes and the complete nervous system [30]. Vertebrates, such as frogs, also display the capability of regenerating limbs, jaws, eyes and a variety of internal structures [8]. Humans too (especially children) are sometimes capable of fingertip regeneration after distal phalange amputation [18].

[PAGE 7] B. Mechanisms of biological regeneration.
Several of the mechanisms by which organisms achieve these forms of self-editing of their own anatomy pose design challenges and future research directions for robotics.

First is the ability to harness the behavior of low-level components (cells) towards a specific large-scale goal-state: salamanders can regenerate whole limbs, eyes, tails, ovaries, and other organs [28], but growth and remodeling ceases when a correctly shaped and sized organ is complete [33].  Second is the flexibility and robustness of systems under novel conditions. For example, tadpoles whose facial organs are experimentally placed in abnormal configurations will undergo novel rearrangements to still give rise to normal frog faces during metamorphosis [41], showing that the genome encodes not a hardwired set of movements for each organ but rather specifies a machine that can remodel toward the same target morphology from a variety of unexpected starting states. Thus, it is critical to understand and exploit the ability of evolution to give rise to hardware that is well-adapted to the normal environment but also retains significant plasticity [39].

Third is the fact that during regeneration, the tissues making growth and morphogenesis decisions are themselves being


[PAGE 8] drastically rearranged: thus, the computational control circuitry is itself the object of the deformation actuators, forming a closed loop in which information is reliably processed in a medium that is constantly changing [32]. Finally, the remarkable robustness of morphological computation extends to information learned within the lifetime of the organism [4]. Butterflies, which result from a caterpillar brain that is almost completely dissolved during metamorphosis, still remember information learned during the caterpillar stage [3]. Flatworms, which regrow their entire heads, still remember information they learned prior to decapitation [12, 36].

Attempts to implement these capabilities in artificial systems (whether robotic or via synthetic biology) are likely to enrich not only engineering technology, but also to feed back to the biological sciences and biomedicine. The current understanding of computation in biological tissues has numerous gaps, which are only likely to be filled by attempts to build these capabilities from the ground up [19].

[PAGE 8] C. Metamorphosing machines.
It has been shown here that robots, too, are not only capable of regenerating limbs, but that such deformation can manifest by selecting for function recovery alone, instead of a target legged shape.

However, this ability largely depends on the material with which robots are made, for even if morphology is free to change in rigid bodies, the ways in which such change can occur are limited at best. In [5], robots used a combination of rotary and linear actuators to slowly angle appendages downward and extrude them outward, thus simulating limb growth.  In softer machines, there are more ways for morphology to change: The soft robot used here was able to locally deform its geometry to bend, twist, compress or expand throughout its body. It is also possible, although not investigated here, for soft robots to change their material properties, such as stiffness, through (e.g.) granular jamming [9, 23].

The possibility of this latter change highlights the inadequacy of the name "soft robot". When a granular jamming robot jams (removes excess internal air to become stiff) does it cease to be a soft robot? What if it never unjams? For the purposes of damage repair, the most important property of soft robots is not that they are soft per se, but that they may easily change their structural and material properties (possibly including stiffness). One can envisage future "rigid" nanobots capable of self-assembling into a protean metamachine that can rearrange so as to regrow a lost part; but that day seems far off, whereas soft robots, capable of continuous morphological change, are already becoming a reality.

The future of this line of work promises not just new robotic systems but also new science. Shapeshifting robots, recast as scientific tools, can shed new light on old biological questions about developmental plasticity, regeneration and homeostasis [21, 22, 25]. And, symmetrically, new theories about the mechanisms that lie at the heart of such questions can be physically instantiated and optimized in a new breed of useful, autonomous and adaptive machines.

[PAGE 8] ACKNOWLEDGEMENTS
This work was supported by NSF award EFRI-1830870 and DARPA contract HR0011-18-2-0022. Dylan Shah was supported by NASA STRF-80NSSC17K0164. Computation was provided by the Vermont Advanced Computing Core. We thank Gabrielle Branin for the sim2real demonstration videos.

[PAGE 9] REFERENCES
[1] R McNeill Alexander. Principles of animal locomotion. Princeton University Press, 2003. ISBN 9780691126340.
... (rest of references as in Extraction 1 or 3, ensuring consistent formatting)